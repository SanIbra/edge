if exists("b:did_indent")
  finish
endif

let b:did_indent = 1

setlocal autoindent
setlocal indentexpr=MyIndent(v:lnum)

if exists("MyIndent")
  finish
endif

function! MyIndent(lnum)
	if has('syntax_items')
		let prevlinenum = s:get_last_normal_line(a:lnum - 1)
		if !prevlinenum
			return -1
		endif
		
		let line = s:get_line_trimmed(a:lnum) "line without comment and undesirable spaces

		let matchlinenum = s:get_matching_line(line, a:lnum)

		if matchlinenum != 0
			return indent(matchlinenum)
		endif

		let prevline = s:get_line_trimmed(prevlinenum)
		let previndent = indent(prevlinenum)

		if prevline =~ s:INDENT_AFTER_PAIRED_SYMBOL
			return previndent + &shiftwidth
		endif
	endif
	return -1
endfunction

function! s:is_comment(lnum, col)
	return s:synthax_name(a:lnum, a:col) =~ "Comment"
endfunction

function! s:get_last_normal_line(lnum)
	let curlinenum = a:lnum

 	while curlinenum > 0
		if getline(curlinenum) !~ s:BLANK_LINE && !s:all_line_comment(curlinenum)
			return curlinenum
		endif

		let curlinenum -= 1
	endwhile

	return 0
endfunction

function! s:analyse_ligne(rbegin, rend, line, score)
	if a:score == 0
		return 0
	endif
	if a:line =~ ('\.*'.a:rbegin)
		let new_line = substitute(a:line,a:rbegin,"","")
		return s:analyse_ligne(a:rbegin,a:rend, new_line, a:score - 1)
	endif
	if a:line =~ ('\.*'.a:rend)
		let new_line = substitute(a:line,a:rend,"","")
		return s:analyse_ligne(a:rbegin,a:rend, new_line, a:score + 1)
	endif
	return a:score
endfunction


